
### New Project Setup:

1. Project Initialization:
   - Create a new project.

2. Test Cleanup:
   - Delete the default test files that are not needed.

3. Package Management:
   - Add essential pub packages using the `pubspec.yaml` file. Include packages like:
     - Firebase
     - Icon
     - Bloc
     - Hex
     - Snackbar
     - and any other necessary packages.

4. Version Management:
   - Update version numbers and dependencies in the `build.gradle` or `app/build.gradle` file as required.

5. Android Configuration:
   - Handle potential exceptions, like `FileNotFoundException`, in the `build.gradle` for Android.

6. App Name Configuration (Android):
   - Change the app name in the `AndroidManifest.xml` file to reflect your project's name.

7. App Name Configuration (iOS):
   - Change the app name in the `Info.plist` file located in the `ios` directory under `CFBundleName`.

8. Documentation:
   - Update the README file to include information about your project, its purpose, and any setup instructions.

9. Icon Configuration:
   - Customize the app icon using `flutter_launcher_icons`. Run the command:
   
       put
flutter_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/logo.png"
  min_sdk_android: 21 # android min sdk min:16, default 21
  web:
    generate: true
    image_path: "assets/logo.png"


     change image path location
     flutter pub run flutter_launcher_icons:main


9. API key for Map (optional) Configuration:
   - change the api key in Runner/AppDelegate.swift and main/AndroidManifest.xml:





### Firebase Setup Instructions:

1. Firebase Account Setup:
   - Follow these steps to create a Firebase project:
     - Go to the Firebase Console (https://console.firebase.google.com/).
     - go "Add APP" then "FLUTTER".
     - follow steps


2. Activate Firebase Services:
   - After creating the project, activate the required Firebase services:
     - Database: Set up the Firebase Realtime Database or Firestore, depending on your project's needs.
     - Authentication: Configure Firebase Authentication to manage user authentication.
     - AppCheck: Enable Firebase App Check to protect your app and services from abuse and unauthorized access.




### FCC To-Do List

    Codebase Changes:
1. Grade (APP): Update the 'grade' file for the APP.
2. Grade (Android): Update the 'grade' file for the Android platform.
3. key.properties: Make necessary changes to the 'key.properties' file.
4. local.properties: Update and maintain the 'local.properties' file.

    Copy:
5. Lib: Organize and maintain the 'Lib' directory.
6. Pub: Reorganize and update the 'Pub' directory.
7. Assets: Review and manage the 'Assets' folder.

    Structural Changes:
8. Change Pub Name: Rename the 'Pub' directory as needed.
9. Update Gradle Package: Modify the package name from 'com.example' to your desired package name in two locations.





### Flutter Web Deploy

1. flutter build web: Generate the web version of your Flutter project using the command: `flutter build web`.

2. firebase login: Ensure you are logged in to Firebase by running the command: `firebase login`.

3. firebase init: Initialize Firebase for your project using: `firebase init`.

4. firebase deploy: Deploy your Flutter web app to Firebase Hosting with: `firebase deploy`.


For Another Domain: If you need to deploy to a different domain:

   - First, add the site name to your `firebase.json` configuration file with the following line:
     "hosting": {
       "target": "name of website",
       "public": "build/web"
     }

   - Apply the hosting configuration for the specific website using:

     firebase target:apply hosting "name of website" "name of website"

   - Finally, deploy to the new website using:
     firebase deploy --only hosting:"name of website"

Make sure to replace `"name of website"` with the actual name of your website in the commands and configuration file.



###for change package name
  pub get change_app_package_name: ^1.1.0
  run
  flutter pub run change_app_package_name:main com."new"."packageName"
  change the "new" and "packageName"


### For App Release:
    Change App Label in Android.XML
    Reformat Code, Optimize Imports
    run cd .\android\
    run
    keytool -genkey -v -keystore ----%location of .\project\ %---- \android\upload-keystore.jks -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 -alias upload
    before your run code above, change location of .\project\
    change file version
    change password and storeFile in key.properties ensure to use "\\" not "/"



### For App Security:
   Use  '''flutter build apk --obfuscate --split-debug-info=/obfuscate/'''
   use print_c
   Don't print DIO 



### For IOS Build:
   cd ios
   pod init 
   copy PodFile from FlutterCleanCoded/ios
   change iOS build to:  14
   pod install 
   xed .
   in Runner (PROJECT):
   build for distribution: No
   user script sandbox: No
   Include of non-modular header inside framework module: Yes
   change runner build to: 14 
   run build

### For IOS Release:
   Download Apple Developer from the Apple App Store
   sign in to the account 
   build ios
   archive ios (Product>Archive)
   distribute (Window>Organizer)
   choose signing algorthem 
   release 


### IOS CACHE Clean
   flutter clean
   rm -rf ~/Library/Developer/Xcode/DerivedData
   Go to Xcode App then use the shortcut `Shift + Command + K`
   rm -rf ~/Library/Caches/com.apple.dt.Xcode




